# AZIZ RAHMAD ISNANTO
# 23502210001

import streamlit as st
import pandas as pd
import io
from collections import Counter
import seaborn as sns
import matplotlib.pyplot as plt

st.write('Nama  : Aziz Rahmad Isnato')
st.write('NIM   : 23502210001')

df_business = pd.read_csv('online_course-dataset/udemy_business.csv')
df_design = pd.read_csv('online_course-dataset/udemy_design.csv')
df_finance = pd.read_csv('online_course-dataset/udemy_finance.csv')
df_lifestyle = pd.read_csv('online_course-dataset/udemy_lifestyle.csv')
df_marketing = pd.read_csv('online_course-dataset/udemy_marketing.csv')
df_music = pd.read_csv('online_course-dataset/udemy_music.csv')
df_office_productivity = pd.read_csv('online_course-dataset/udemy_office_productivity.csv')
df_photography = pd.read_csv('online_course-dataset/udemy_photography.csv')
df_tech = pd.read_csv('online_course-dataset/udemy_tech.csv')

st.write('## UAS Object Oriented Programming')
st.write('Dataset: [online_course-dataset : Udemy](https://prasetiyamulya-my.sharepoint.com/:u:/g/personal/eko_ariawan_prasetiyamulya_ac_id/EeZMHfM9u1JBqDdhj5aXyuIBKSUHcmFyUTbJZc_vAM_PNw?e=HfM9DJ)')

tab_lj, tab_ls = st.tabs(['Lembar Jawab', 'Datasets View (Clean)'])

with tab_lj:
        st.write('Daftar isi:')
        st.markdown('''
                    - [List of question](#list-of-question)
                    - [Library yang dibutuhkan](#library-yang-dibutuhkan)
                    - [Data Wrangling](#data-wrangling)
                    - [Gathering Data](#gathering-data)
                    - [Cleaning Data Part 1](#cleaning-data-part-1)
                    - [Assessing Data](#assessing-data)
                    - [Cleaning Data Part 2](#cleaning-data-part-2)
                    - [Explanatory Data Analysis](#explanatory-data-analysis)
                    - [Visualization](#visualization)
                    - [Conclusion](#conclusion)
                    ''')
        st.markdown("<hr>", unsafe_allow_html=True)
    
        st.write('### #List of question')
        st.markdown('''
                    1. Apa saja video yang paling banyak di enroll pada tiap kategorinya?
                    2. Apa saja kata kunci yang sering digunakan di Title pada tiap kategorinya?
                    3. Apa saja kata kunci yang sering digunakan di Summary pada tiap kategorinya?
                    4. Bagaimana korelasi antara Enrollment dan Stars?
                    5. Bagaimana korelasi antara Rating dan Stars?
                    ''')

        st.markdown("<hr>", unsafe_allow_html=True)
        st.write('### #Library yang dibutuhkan')
        st.write('Saya menggunakan library **Streamlit**, **Pandas**, **io**, **Counter**, **Seaborn**, dan **Matplotlib**')
        st.code('''
                import streamlit as st
                import pandas as pd
                import io
                from collections import Counter
                import seaborn as sns
                import matplotlib.pyplot as plt
        ''')
        st.markdown("<hr>", unsafe_allow_html=True)

        st.write('### #Data Wrangling')

        st.write('#### #Gathering Data')
        st.write('Saya menamai variable df sesuai kategori datanya')

        st.code('''
            df_business = pd.read_csv('online_course-dataset/udemy_business.csv')
            df_business.head()
            ''')
        st.dataframe(df_business.head())

        st.code('''
                df_design = pd.read_csv("online_course-dataset/udemy_design.csv")
                df_design.head()
                ''')
        st.dataframe(df_design.head())

        st.code('''
            df_finance = pd.read_csv('online_course-dataset/udemy_finance.csv')
            df_lifestyle = pd.read_csv('online_course-dataset/udemy_lifestyle.csv')
            df_marketing = pd.read_csv('online_course-dataset/udemy_marketing.csv')
            df_music = pd.read_csv('online_course-dataset/udemy_music.csv')
            df_office_productivity = pd.read_csv('online_course-dataset/udemy_office_productivity.csv')
            df_photography = pd.read_csv('online_course-dataset/udemy_photography.csv')
            df_tech = pd.read_csv('online_course-dataset/udemy_tech.csv')''')
        st.markdown("<hr>", unsafe_allow_html=True)
        
        
        st.write('#### #Cleaning Data Part 1')
        st.write('Berdasarkan data yang saya lihat, ternyata terdapat kolom "index" bawaan yang mana index itu seharusnya autogenerated oleh pandas. Sehingga data yg terduplikasi tidak ada ketemu karena biarpun datanya sama, tetap saja punya index yang berbeda. Maka kolom "index" perlu kita hapus.')
        st.code('''
            df_business.drop('index', axis=1, inplace=True)
            df_design.drop('index', axis=1, inplace=True)
            df_finance.drop('index', axis=1, inplace=True)
            df_lifestyle.drop('index', axis=1, inplace=True)
            df_marketing.drop('index', axis=1, inplace=True)
            df_music.drop('index', axis=1, inplace=True)
            df_office_productivity.drop('index', axis=1, inplace=True)
            df_photography.drop('index', axis=1, inplace=True)
            df_tech.drop('index', axis=1, inplace=True)
        ''')
        df_business.drop('index', axis=1, inplace=True)
        df_design.drop('index', axis=1, inplace=True)
        df_finance.drop('index', axis=1, inplace=True)
        df_lifestyle.drop('index', axis=1, inplace=True)
        df_marketing.drop('index', axis=1, inplace=True)
        df_music.drop('index', axis=1, inplace=True)
        df_office_productivity.drop('index', axis=1, inplace=True)
        df_photography.drop('index', axis=1, inplace=True)
        df_tech.drop('index', axis=1, inplace=True)

        st.write('Sehingga menjadi:')
        st.code('df_business.head()')
        st.dataframe(df_business.head())
        st.code('df_design.head()')
        st.dataframe(df_design.head())
        st.write('Dan seterusnya...')

        st.markdown("<hr>", unsafe_allow_html=True)
        st.write('#### #Assessing Data')

        with st.expander('Assessing Data df_business'):
            st.write('#### Assessing Data **df_business**')
            st.code('df_business.info()')
            buffer = io.StringIO()
            df_business.info(buf=buffer)
            s = buffer.getvalue()
            st.text(s)

            st.code('df_business.isna().sum()')
            st.text(df_business.isna().sum())

            st.code('df_business.duplicated().sum()')
            st.text(f'Jumlah duplikasi data: {df_business.duplicated().sum()}')

            st.code('df_business.describe()')
            st.text(df_business.describe())
        with st.expander('Assessing Data df_design'):
            st.write('#### Assessing Data **df_design**')
            st.code('df_design.info()')
            buffer = io.StringIO()
            df_design.info(buf=buffer)
            s = buffer.getvalue()
            st.text(s)

            st.code('df_design.isna().sum()')
            st.text(df_design.isna().sum())

            st.code('df_design.duplicated().sum()')
            st.text(f'Jumlah duplikasi data: {df_design.duplicated().sum()}')

            st.code('df_design.describe()')
            st.text(df_design.describe())
        with st.expander('Assessing Data df_finance'):
            st.write('#### Assessing Data **df_finance**')
            st.code('df_finance.info()')
            buffer = io.StringIO()
            df_finance.info(buf=buffer)
            s = buffer.getvalue()
            st.text(s)

            st.code('df_finance.isna().sum()')
            st.text(df_finance.isna().sum())

            st.code('df_finance.duplicated().sum()')
            st.text(f'Jumlah duplikasi data: {df_finance.duplicated().sum()}')

            st.code('df_finance.describe()')
            st.text(df_finance.describe())
        with st.expander('Assessing Data df_lifestyle'):
            st.write('#### Assessing Data **df_lifestyle**')
            st.code('df_lifestyle.info()')
            buffer = io.StringIO()
            df_lifestyle.info(buf=buffer)
            s = buffer.getvalue()
            st.text(s)

            st.code('df_lifestyle.isna().sum()')
            st.text(df_lifestyle.isna().sum())

            st.code('df_lifestyle.duplicated().sum()')
            st.text(f'Jumlah duplikasi data: {df_lifestyle.duplicated().sum()}')

            st.code('df_lifestyle.describe()')
            st.text(df_lifestyle.describe())
        with st.expander('Assessing Data df_marketing'):
            st.write('#### Assessing Data **df_marketing**')
            st.code('df_marketing.info()')
            buffer = io.StringIO()
            df_marketing.info(buf=buffer)
            s = buffer.getvalue()
            st.text(s)

            st.code('df_marketing.isna().sum()')
            st.text(df_marketing.isna().sum())

            st.code('df_marketing.duplicated().sum()')
            st.text(f'Jumlah duplikasi data: {df_marketing.duplicated().sum()}')

            st.code('df_marketing.describe()')
            st.text(df_marketing.describe())
        with st.expander('Assessing Data df_music'):
            st.write('#### Assessing Data **df_music**')
            st.code('df_music.info()')
            buffer = io.StringIO()
            df_music.info(buf=buffer)
            s = buffer.getvalue()
            st.text(s)

            st.code('df_music.isna().sum()')
            st.text(df_music.isna().sum())

            st.code('df_music.duplicated().sum()')
            st.text(f'Jumlah duplikasi data: {df_music.duplicated().sum()}')

            st.code('df_music.describe()')
            st.text(df_music.describe())
        with st.expander('Assessing Data df_office_productivity'):
            st.write('#### Assessing Data **df_office_productivity**')
            st.code('df_office_productivity.info()')
            buffer = io.StringIO()
            df_office_productivity.info(buf=buffer)
            s = buffer.getvalue()
            st.text(s)

            st.code('df_office_productivity.isna().sum()')
            st.text(df_office_productivity.isna().sum())

            st.code('df_office_productivity.duplicated().sum()')
            st.text(f'Jumlah duplikasi data: {df_office_productivity.duplicated().sum()}')

            st.code('df_office_productivity.describe()')
            st.text(df_office_productivity.describe())
        with st.expander('Assessing Data df_photography'):
            st.write('#### Assessing Data **df_photography**')
            st.code('df_photography.info()')
            buffer = io.StringIO()
            df_photography.info(buf=buffer)
            s = buffer.getvalue()
            st.text(s)

            st.code('df_photography.isna().sum()')
            st.text(df_photography.isna().sum())

            st.code('df_photography.duplicated().sum()')
            st.text(f'Jumlah duplikasi data: {df_photography.duplicated().sum()}')

            st.code('df_photography.describe()')
            st.text(df_photography.describe())
        with st.expander('Assessing Data df_tech'):
            st.write('#### Assessing Data **df_tech**')
            st.code('df_tech.info()')
            buffer = io.StringIO()
            df_tech.info(buf=buffer)
            s = buffer.getvalue()
            st.text(s)

            st.code('df_tech.isna().sum()')
            st.text(df_tech.isna().sum())

            st.code('df_tech.duplicated().sum()')
            st.text(f'Jumlah duplikasi data: {df_tech.duplicated().sum()}')

            st.code('df_tech.describe()')
            st.text(df_tech.describe())
        st.markdown("<hr>", unsafe_allow_html=True)

        st.write('#### #Cleaning Data Part 2')
        st.write('''
                 Berdasarkan assesing data yang telah dilakukan di step sebelumnya, dapat diketahui
                - Banyak data terduplikasi pada datasets: df_business, df_design, df_finance, df_marketing, dan df_tech
                - Tidak ada data yang missing value (null), kecuali beberapa kolom **Summary** pada dataset df_business, df_design, df_finance, dan df_tech
                 ''')
        st.write('##### #Menghapus data duplikat')
        st.text(f'Jumlah duplikasi df_business : {df_business.duplicated().sum()}')
        st.text(f'Jumlah duplikasi df_design   : {df_design.duplicated().sum()}')
        st.text(f'Jumlah duplikasi df_finance  : {df_finance.duplicated().sum()}')
        st.text(f'Jumlah duplikasi df_marketing: {df_marketing.duplicated().sum()}')
        st.text(f'Jumlah duplikasi df_tech     : {df_tech.duplicated().sum()}')

        st.code('''
            df_business.drop_duplicates(inplace=True)
            df_design.drop_duplicates(inplace=True)
            df_finance.drop_duplicates(inplace=True)
            df_marketing.drop_duplicates(inplace=True)
            df_tech.drop_duplicates(inplace=True)
        ''')
        df_business.drop_duplicates(inplace=True)
        df_design.drop_duplicates(inplace=True)
        df_finance.drop_duplicates(inplace=True)
        df_marketing.drop_duplicates(inplace=True)
        df_tech.drop_duplicates(inplace=True)
        st.write('Setelah duplikat dihapus:')
        st.text(f'Jumlah duplikasi df_business : {df_business.duplicated().sum()}')
        st.text(f'Jumlah duplikasi df_design   : {df_design.duplicated().sum()}')
        st.text(f'Jumlah duplikasi df_finance  : {df_finance.duplicated().sum()}')
        st.text(f'Jumlah duplikasi df_marketing: {df_marketing.duplicated().sum()}')
        st.text(f'Jumlah duplikasi df_tech     : {df_tech.duplicated().sum()}')

        st.write('##### #Mengisi data missing value (null)')
        st.code('''
            df_business[df_business.Summary.isna()]
            df_design[df_design.Summary.isna()]
            df_finance[df_finance.Summary.isna()]
            df_tech[df_tech.Summary.isna()]
        ''')
        st.dataframe(df_business[df_business.Summary.isna()])
        st.dataframe(df_design[df_design.Summary.isna()])
        st.dataframe(df_finance[df_finance.Summary.isna()])
        st.dataframe(df_tech[df_tech.Summary.isna()])

        st.write('Data yang None tersebut akan kita isi dengan "Unsummarized description video"')
        st.code('''
            df_business.Summary.fillna(value="Unsummarized description video", inplace=True)
            df_design.Summary.fillna(value="Unsummarized description video", inplace=True)
            df_finance.Summary.fillna(value="Unsummarized description video", inplace=True)
            df_tech.Summary.fillna(value="Unsummarized description video", inplace=True)
        ''')

        df_business.Summary.fillna(value="Unsummarized description video", inplace=True)
        df_design.Summary.fillna(value="Unsummarized description video", inplace=True)
        df_finance.Summary.fillna(value="Unsummarized description video", inplace=True)
        df_tech.Summary.fillna(value="Unsummarized description video", inplace=True)

        st.write('Sehingga menjadi:')
        st.code('''
            df_business.Summary.isna().sum()
            df_design.Summary.isna().sum()
            df_finance.Summary.isna().sum()
            df_tech.Summary.isna().sum()
        ''')
        st.text(df_business.Summary.isna().sum())
        st.text(df_design.Summary.isna().sum())
        st.text(df_finance.Summary.isna().sum())
        st.text(df_tech.Summary.isna().sum())
        st.markdown("<hr>", unsafe_allow_html=True)

        st.write('### #Explanatory Data Analysis')
        st.write('Berdasarkan pertanyaan yang ditetapkan di atas')
        st.write('##### 1. Apa saja video yang paling banyak di enroll pada tiap kategorinya?')

        st.write('- df_business')
        st.code("df_business.sort_values(by='Enrollment', ascending=False).iloc[0]")
        st.dataframe(df_business.sort_values(by='Enrollment', ascending=False).iloc[0])
        most_enroll_business = df_business.sort_values(by='Enrollment', ascending=False).iloc[0]

        st.write('- df_design')
        st.code("df_design.sort_values(by='Enrollment', ascending=False).iloc[0]")
        st.dataframe(df_design.sort_values(by='Enrollment', ascending=False).iloc[0])
        most_enroll_design = df_design.sort_values(by='Enrollment', ascending=False).iloc[0]

        st.write('- df_finance')
        st.code("df_finance.sort_values(by='Enrollment', ascending=False).iloc[0]")
        st.dataframe(df_finance.sort_values(by='Enrollment', ascending=False).iloc[0])
        most_enroll_finance = df_finance.sort_values(by='Enrollment', ascending=False).iloc[0]

        st.write('- df_lifestyle')
        st.code("df_lifestyle.sort_values(by='Enrollment', ascending=False).iloc[0]")
        st.dataframe(df_lifestyle.sort_values(by='Enrollment', ascending=False).iloc[0])
        most_enroll_lifestyle = df_lifestyle.sort_values(by='Enrollment', ascending=False).iloc[0]

        st.write('- df_marketing')
        st.code("df_marketing.sort_values(by='Enrollment', ascending=False).iloc[0]")
        st.dataframe(df_marketing.sort_values(by='Enrollment', ascending=False).iloc[0])
        most_enroll_marketing = df_marketing.sort_values(by='Enrollment', ascending=False).iloc[0]

        st.write('- df_music')
        st.code("df_music.sort_values(by='Enrollment', ascending=False).iloc[0]")
        st.dataframe(df_music.sort_values(by='Enrollment', ascending=False).iloc[0])
        most_enroll_music = df_music.sort_values(by='Enrollment', ascending=False).iloc[0]

        st.write('- df_office_productivity')
        st.code("df_office_productivity.sort_values(by='Enrollment', ascending=False).iloc[0]")
        st.dataframe(df_office_productivity.sort_values(by='Enrollment', ascending=False).iloc[0])
        most_enroll_office_productivity = df_office_productivity.sort_values(by='Enrollment', ascending=False).iloc[0]

        st.write('- df_photography')
        st.code("df_photography.sort_values(by='Enrollment', ascending=False).iloc[0]")
        st.dataframe(df_photography.sort_values(by='Enrollment', ascending=False).iloc[0])
        most_enroll_photography = df_photography.sort_values(by='Enrollment', ascending=False).iloc[0]

        st.write('- df_tech')
        st.code("df_tech.sort_values(by='Enrollment', ascending=False).iloc[0]")
        st.dataframe(df_tech.sort_values(by='Enrollment', ascending=False).iloc[0])
        most_enroll_tech = df_tech.sort_values(by='Enrollment', ascending=False).iloc[0]

        df_business_a = pd.DataFrame({'Category': [most_enroll_business['Title']], 'Enrollment': [most_enroll_business['Enrollment']]})
        df_design_a = pd.DataFrame({'Category': [most_enroll_design['Title']], 'Enrollment': [most_enroll_design['Enrollment']]})
        df_finance_a = pd.DataFrame({'Category': [most_enroll_finance['Title']], 'Enrollment': [most_enroll_finance['Enrollment']]})
        df_lifestyle_a = pd.DataFrame({'Category': [most_enroll_lifestyle['Title']], 'Enrollment': [most_enroll_lifestyle['Enrollment']]})
        df_marketing_a = pd.DataFrame({'Category': [most_enroll_marketing['Title']], 'Enrollment': [most_enroll_marketing['Enrollment']]})
        df_music_a = pd.DataFrame({'Category': [most_enroll_music['Title']], 'Enrollment': [most_enroll_music['Enrollment']]})
        df_office_productivity_a = pd.DataFrame({'Category': [most_enroll_office_productivity['Title']], 'Enrollment': [most_enroll_office_productivity['Enrollment']]})
        df_photography_a = pd.DataFrame({'Category': [most_enroll_photography['Title']], 'Enrollment': [most_enroll_photography['Enrollment']]})
        df_tech_a = pd.DataFrame({'Category': [most_enroll_tech['Title']], 'Enrollment': [most_enroll_tech['Enrollment']]})

        top_enroll = pd.concat([df_business_a, df_design_a, df_finance_a, df_lifestyle_a, df_marketing_a, df_music_a, df_office_productivity_a, df_photography_a, df_tech_a], ignore_index=True)


        st.write('##### 2. Apa saja kata kunci yang sering digunakan di Title pada tiap kategorinya?')
        st.write('Saya menggunakan library Counter untuk menghitung setiap kata yang muncul selain itu saya juga menghilangkan beberapa simbol yang sering muncul (-,./) dan kata hubung ("a", "for", "to"), etc dengan methode replace. Dengan kode seperti di bawah')
        st.code('''
            df_business_titles = ' '.join(df_business['Title'])
            df_business_titles = df_business_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ','   ')
            word_counts = Counter(df_business_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
        ''')
        col1, col2, col3 = st.columns(3)

        with col1:
            st.write('- df_business')
            # st.code()
            df_business_titles = ' '.join(df_business['Title'])
            df_business_titles = df_business_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ','   ')
            word_counts = Counter(df_business_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")

            df_keywords_business = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])


            st.write('- df_lifestyle')
            df_lifestyle_titles = ' '.join(df_lifestyle['Title'])
            df_lifestyle_titles = df_lifestyle_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ')
            word_counts = Counter(df_lifestyle_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_lifestyle = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
            st.write('- df_office_productivity')
            df_office_productivity_titles = ' '.join(df_office_productivity['Title'])
            df_office_productivity_titles = df_office_productivity_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ')
            word_counts = Counter(df_office_productivity_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_office_productivity = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
        with col2:
            st.write('- df_design')
            df_design_titles = ' '.join(df_design['Title'])
            df_design_titles = df_design_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ','   ')
            word_counts = Counter(df_design_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_design = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
            st.write('- df_marketing')
            df_marketing_titles = ' '.join(df_marketing['Title'])
            df_marketing_titles = df_marketing_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ')
            word_counts = Counter(df_marketing_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_marketing = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
            
            st.write('- df_photography')
            df_photography_titles = ' '.join(df_photography['Title'])
            df_photography_titles = df_photography_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ')
            word_counts = Counter(df_photography_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_photography = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
        with col3:
            st.write('- df_finance')
            df_finance_titles = ' '.join(df_finance['Title'])
            df_finance_titles = df_finance_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ')
            word_counts = Counter(df_finance_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_finance = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
            st.write('- df_music')
            df_music_titles = ' '.join(df_music['Title'])
            df_music_titles = df_music_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ')
            word_counts = Counter(df_music_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_music = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
            st.write('- df_tech')
            df_tech_titles = ' '.join(df_tech['Title'])
            df_tech_titles = df_tech_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ').replace('with', '')
            word_counts = Counter(df_tech_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_tech = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
        st.write('##### 3. Apa saja kata kunci yang sering digunakan di Summary pada tiap kategorinya?')
        st.write('Saya menggunakan library Counter untuk menghitung setiap kata yang muncul selain itu saya juga menghilangkan beberapa simbol yang sering muncul (-,./) dan kata hubung ("a", "for", "to"), etc dengan methode replace. Dengan kode seperti di bawah')
        st.code('''
            df_business_summary = ' '.join(df_business['Summary'])
            df_business_summary = df_business_summary.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ','   ')
            word_counts = Counter(df_business_summary.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
        ''')

        col1, col2, col3 = st.columns(3)
        with col1:
            st.write('- df_business')
            df_business_summary = ' '.join(df_business['Summary'])
            df_business_summary = df_business_summary.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ','   ')
            word_counts = Counter(df_business_summary.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_business_summary = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
            st.write('- df_lifestyle')
            df_lifestyle_summary = ' '.join(df_lifestyle['Summary'])
            df_lifestyle_summary = df_lifestyle_summary.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ','   ')
            word_counts = Counter(df_lifestyle_summary.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_lifestyle_summary = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
            st.write('- df_office_productivity')
            df_office_productivity_summary = ' '.join(df_office_productivity['Summary'])
            df_office_productivity_summary = df_office_productivity_summary.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ','   ')
            word_counts = Counter(df_office_productivity_summary.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_office_productivity_summary = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
        with col2:
            st.write('- df_design')
            df_design_titles = ' '.join(df_design['Summary'])
            df_design_titles = df_design_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ','   ')
            word_counts = Counter(df_design_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_design_summary = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])

            st.write('- df_marketing')
            df_marketing_titles = ' '.join(df_marketing['Summary'])
            df_marketing_titles = df_marketing_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ')
            word_counts = Counter(df_marketing_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_marketing_summary = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])
            
            st.write('- df_photography')
            df_photography_titles = ' '.join(df_photography['Summary'])
            df_photography_titles = df_photography_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ')
            word_counts = Counter(df_photography_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_photography_summary = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])

        with col3:
            st.write('- df_finance')
            df_finance_titles = ' '.join(df_finance['Summary'])
            df_finance_titles = df_finance_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ')
            word_counts = Counter(df_finance_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_finance_summary = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])

            st.write('- df_music')
            df_music_titles = ' '.join(df_music['Summary'])
            df_music_titles = df_music_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ')
            word_counts = Counter(df_music_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_music_summary = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])

            st.write('- df_tech')
            df_tech_titles = ' '.join(df_tech['Summary'])
            df_tech_titles = df_tech_titles.lower().replace('-', ' ').replace(':', ' ').replace('/',' ').replace('&','').replace(' to ', ' ').replace(' for ', ' ').replace(' and ', ' ').replace(' in ', ' ').replace(' a ', ' ').replace('the ', '').replace(' of ',' ').replace('with', '')
            word_counts = Counter(df_tech_titles.split())
            most_common_keywords = word_counts.most_common(5)
            for keyword, count in most_common_keywords:
                st.text(f"{keyword}: {count} kali")
            df_keywords_tech_summary = pd.DataFrame(most_common_keywords, columns=['Keyword', 'Frequency'])


        st.write('##### 4. Bagaimana korelasi antara Enrollment dan Stars?')
        st.write('Dengan kode yang seperti di bawah')
        st.code('''
            correlation_enrollment_stars = df_business['Enrollment'].corr(df_business['Stars'])
            st.text(correlation_enrollment_stars)
        ''')
        col1, col2, col3 = st.columns(3)
        with col1:
            st.write('- df_business')
            correlation_enrollment_stars = df_business['Enrollment'].corr(df_business['Stars'])
            st.text(correlation_enrollment_stars)
            st.write('- lifestyle')
            correlation_enrollment_stars = df_lifestyle['Enrollment'].corr(df_lifestyle['Stars'])
            st.text(correlation_enrollment_stars)
            st.write('- office_productivity')
            correlation_enrollment_stars = df_office_productivity['Enrollment'].corr(df_office_productivity['Stars'])
            st.text(correlation_enrollment_stars)
        with col2:
            st.write('- df_design')
            correlation_enrollment_stars = df_design['Enrollment'].corr(df_design['Stars'])
            st.text(correlation_enrollment_stars)
            st.write('- df_marketing')
            correlation_enrollment_stars = df_marketing['Enrollment'].corr(df_marketing['Stars'])
            st.text(correlation_enrollment_stars)
            st.write('- df_photography')
            correlation_enrollment_stars = df_photography['Enrollment'].corr(df_photography['Stars'])
            st.text(correlation_enrollment_stars)
        with col3:
            st.write('- df_finance')
            correlation_enrollment_stars = df_finance['Enrollment'].corr(df_finance['Stars'])
            st.text(correlation_enrollment_stars)
            st.write('- df_music')
            correlation_enrollment_stars = df_music['Enrollment'].corr(df_music['Stars'])
            st.text(correlation_enrollment_stars)
            st.write('- df_tech')
            correlation_enrollment_stars = df_tech['Enrollment'].corr(df_tech['Stars'])
            st.text(correlation_enrollment_stars)

        st.write('##### 5. Bagaimana korelasi antara Rating dan Stars?')
        st.write('Dengan kode yang seperti di bawah')
        st.code('''
            correlation_rating_stars = df_business['Rating'].corr(df_business['Stars'])
            st.text(correlation_rating_stars)
        ''')
        col1, col2, col3 = st.columns(3)
        with col1:
            st.write('- df_business')
            correlation_rating_stars = df_business['Rating'].corr(df_business['Stars'])
            st.text(correlation_rating_stars)
            st.write('- lifestyle')
            correlation_rating_stars = df_lifestyle['Rating'].corr(df_lifestyle['Stars'])
            st.text(correlation_rating_stars)
            st.write('- office_productivity')
            correlation_rating_stars = df_office_productivity['Rating'].corr(df_office_productivity['Stars'])
            st.text(correlation_rating_stars)

        with col2:
            st.write('- df_design')
            correlation_rating_stars = df_design['Rating'].corr(df_design['Stars'])
            st.text(correlation_rating_stars)
            st.write('- df_marketing')
            correlation_rating_stars = df_marketing['Rating'].corr(df_marketing['Stars'])
            st.text(correlation_rating_stars)
            st.write('- df_photography')
            correlation_rating_stars = df_photography['Rating'].corr(df_photography['Stars'])
            st.text(correlation_rating_stars)
        with col3:
            st.write('- df_finance')
            correlation_rating_stars = df_finance['Rating'].corr(df_finance['Stars'])
            st.text(correlation_rating_stars)
            st.write('- df_music')
            correlation_rating_stars = df_music['Rating'].corr(df_music['Stars'])
            st.text(correlation_rating_stars)
            st.write('- df_tech')
            correlation_rating_stars = df_tech['Rating'].corr(df_tech['Stars'])
            st.text(correlation_rating_stars)


        st.markdown("<hr>", unsafe_allow_html=True)

        st.write('### #Visualization')
        st.write('##### Visualisasi perbandingan Title yang sering di enroll di setiap kategori')

        sns.set(style="whitegrid")

        # plt.figure(figsize=(10, 6))          
        fig, ax = plt.subplots(figsize=(12, 8))
        ax = sns.barplot(x='Category', y='Enrollment', data=top_enroll, palette='viridis')
        plt.title('Top 9 Title dengan Enroll Terbanyak')
        plt.ylabel('Enroll')
        ax.set_xticklabels([])
        legend_labels = [plt.Line2D([0], [0], color=ax.patches[i].get_facecolor(), lw=4) for i in range(len(top_enroll))]
        plt.legend(legend_labels, top_enroll['Category'], title='Title', loc='upper left')    
        st.pyplot(fig)

        st.write('##### Visualisasi kata kunci yang sering digunakan di Title')

        col1, col2 = st.columns(2)
        with col1:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_business, palette='deep')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Business Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_finance, palette='deep')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Finance Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_marketing, palette='deep')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Marketing Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_office_productivity, palette='deep')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Office Productivity Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_tech, palette='deep')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Tech Category')
            st.pyplot(fig)

        with col2:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_design, palette='deep')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Design Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_lifestyle, palette='deep')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Lifestyle Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_music, palette='deep')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Music Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_photography, palette='deep')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Photography Category')
            st.pyplot(fig)

        st.write('##### Visualisasi kata kunci yang sering digunakan di Summary')
        col1, col2 = st.columns(2)
        with col1:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_business_summary, palette='pastel')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Business Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_finance_summary, palette='pastel')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Finance Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_marketing_summary, palette='pastel')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Marketing Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_office_productivity_summary, palette='pastel')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Office Productivity Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_tech_summary, palette='pastel')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Tech Category')
            st.pyplot(fig)

        with col2:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_design_summary, palette='pastel')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Design Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_lifestyle_summary, palette='pastel')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Lifestyle Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_music_summary, palette='pastel')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Music Category')
            st.pyplot(fig)

            fig, ax = plt.subplots(figsize=(10, 6))
            ax = sns.barplot(x='Keyword', y='Frequency', data=df_keywords_photography_summary, palette='pastel')
            ax.set_ylabel('Frequency')
            ax.set_title('Top 5 Keywords in Photography Category')
            st.pyplot(fig)

        st.write('##### Visualisasi korelasi dalam bentuk scatterplot')

        col1, col2 = st.columns(2)
        with col1:
            sns.set(style="whitegrid")
            plt.figure(figsize=(10, 6))
            sns.scatterplot(x='Enrollment', y='Stars', data=df_business)
            plt.title('Scatter Plot Enrollment vs Stars')
            plt.xlabel('Enrollment')
            plt.ylabel('Stars')
            scatter_fig = plt.gcf()
            st.pyplot(scatter_fig)
            sns.set(style="whitegrid")
            plt.figure(figsize=(10, 6))
            sns.scatterplot(x='Enrollment', y='Stars', data=df_finance)
            plt.title('Scatter Plot Enrollment vs Stars')
            plt.xlabel('Enrollment')
            plt.ylabel('Stars')
            scatter_fig = plt.gcf()
            st.pyplot(scatter_fig)
            sns.set(style="whitegrid")
            plt.figure(figsize=(10, 6))
            sns.scatterplot(x='Enrollment', y='Stars', data=df_marketing)
            plt.title('Scatter Plot Enrollment vs Stars')
            plt.xlabel('Enrollment')
            plt.ylabel('Stars')
            scatter_fig = plt.gcf()
            st.pyplot(scatter_fig)
            sns.set(style="whitegrid")
            plt.figure(figsize=(10, 6))
            sns.scatterplot(x='Enrollment', y='Stars', data=df_office_productivity)
            plt.title('Scatter Plot Enrollment vs Stars')
            plt.xlabel('Enrollment')
            plt.ylabel('Stars')
            scatter_fig = plt.gcf()
            st.pyplot(scatter_fig)
            sns.set(style="whitegrid")
            plt.figure(figsize=(10, 6))
            sns.scatterplot(x='Enrollment', y='Stars', data=df_tech)
            plt.title('Scatter Plot Enrollment vs Stars')
            plt.xlabel('Enrollment')
            plt.ylabel('Stars')
            scatter_fig = plt.gcf()
            st.pyplot(scatter_fig)
        with col2:
            sns.set(style="whitegrid")
            plt.figure(figsize=(10, 6))
            sns.scatterplot(x='Enrollment', y='Stars', data=df_design)
            plt.title('Scatter Plot Enrollment vs Stars')
            plt.xlabel('Enrollment')
            plt.ylabel('Stars')
            scatter_fig = plt.gcf()
            st.pyplot(scatter_fig)
            sns.set(style="whitegrid")
            plt.figure(figsize=(10, 6))
            sns.scatterplot(x='Enrollment', y='Stars', data=df_lifestyle)
            plt.title('Scatter Plot Enrollment vs Stars')
            plt.xlabel('Enrollment')
            plt.ylabel('Stars')
            scatter_fig = plt.gcf()
            st.pyplot(scatter_fig)
            sns.set(style="whitegrid")
            plt.figure(figsize=(10, 6))
            sns.scatterplot(x='Enrollment', y='Stars', data=df_music)
            plt.title('Scatter Plot Enrollment vs Stars')
            plt.xlabel('Enrollment')
            plt.ylabel('Stars')
            scatter_fig = plt.gcf()
            st.pyplot(scatter_fig)
            sns.set(style="whitegrid")
            plt.figure(figsize=(10, 6))
            sns.scatterplot(x='Enrollment', y='Stars', data=df_photography)
            plt.title('Scatter Plot Enrollment vs Stars')
            plt.xlabel('Enrollment')
            plt.ylabel('Stars')
            scatter_fig = plt.gcf()
            st.pyplot(scatter_fig)

        st.markdown("<hr>", unsafe_allow_html=True)

        st.write('### #Conclusion')
        st.write('''
            Berdasarkan data wragling dan EDA yang telah saya lakukan, saya dapat menemukan video yang paling sering di enroll pada setiap kategorinya, yaitu:
            - Business: An Entire MBA in 1 Course:Award Winning Business School Prof
            - Design: Adobe Photoshop CC: Your Complete Beginner to Advanced Class
            - Finance: Stock Market Investing for Beginners
            - Lifestyle: Healthy Cooking Fundamentals
            - Marketing: The Complete Digital Marketing Course - 12 Courses in 1
            - Music: "Music Theory Comprehensive Complete: Part 4, 5, & 6"
            - Office Productivity: Microsoft Excel - Excel from Beginner to Advanced
            - Photography: Adobe Premiere Pro CC 2020: Video Editing for Beginners
            - Tech: 2020 Complete Python Bootcamp: From Zero to Hero in Python
            
            Selain itu saya juga dapat menemukan beberapa keyword yang paling sering digunakan dalam Title dan Summary di tiap course categorynya. Terakhir saya juga dapat menyimpulkan korelasi positif antara Enrollment dan Stars maupun Rating dan Stars yang mana makin tinggi Enrollment/Rating nya makin tinggi pula Stars nya.
        ''')
        st.write('#### Terima kasih')
        st.markdown("<hr>", unsafe_allow_html=True)

with tab_ls:
    with st.expander('udemy_business.csv'):
        st.dataframe(df_business)
    with st.expander('udemy_design.csv'):
        st.dataframe(df_design)
    with st.expander('udemy_finance.csv'):
        st.dataframe(df_finance)
    with st.expander('udemy_lifestyle.csv'):
        st.dataframe(df_lifestyle)
    with st.expander('udemy_marketing.csv'):
        st.dataframe(df_marketing)
    with st.expander('udemy_music.csv'):
        st.dataframe(df_music)
    with st.expander('udemy_office_productivity.csv'):
        st.dataframe(df_office_productivity)
    with st.expander('udemy_photography.csv'):
        st.dataframe(df_photography)
    with st.expander('udemy_tech.csv'):
        st.dataframe(df_tech)


# print(df_design.duplicated().sum())
# print(df_design.Title.duplicated().sum())

